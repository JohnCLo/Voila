{
  "name": "double-linked-list",
  "version": "2.0.2",
  "description": "A double linked list implementation.",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/wgpsutherland/js-double-linked-list"
  },
  "bugs": {
    "url": "https://github.com/wgpsutherland/js-double-linked-list/issues"
  },
  "keywords": [
    "linked",
    "list",
    "data",
    "structure",
    "data structure",
    "data-structure",
    "double",
    "array",
    "double-linked-list",
    "linked-list",
    "linked list",
    "double linked list",
    "doubly linked list",
    "doubly-linked-list",
    "doubly"
  ],
  "author": {
    "name": "Will Sutherland"
  },
  "license": "ISC",
  "devDependencies": {
    "chai": "^3.2.0",
    "mocha": "^2.2.5"
  },
  "readme": "Double Linked List\r\n==================\r\n\r\nA JavaScript implementation of a double linked list. Much faster than the native JS array if your focus is adding\r\nand removing from large data sets. \r\n\r\nSlow if you need to randomly access elements from within the data set.\r\n\r\n* [`Installation`](#installation)   \r\n* [`Use`](#use)   \r\n* [`Documentation`](#documentation)   \r\n* [`Changelog`](#changelog)   \r\n\r\n## Installation\r\n\r\n    $ npm install double-linked-list\r\n    \r\n## Use\r\n\r\n    var LinkedList = require('double-linked-list');\r\n    \r\n    var list = new LinkedList();\r\n    \r\n## Documentation\r\n    \r\n* [`push`](#push)   \r\n* [`unShift`](#unshift)   \r\n* [`pop`](#pop)   \r\n* [`shift`](#shift)   \r\n* [`first`](#first)   \r\n* [`last`](#last)   \r\n* [`get`](#get)   \r\n* [`length`](#length)   \r\n\r\n### Method reference\r\n\r\n#### \\#push\r\n\r\n    list.push(item);\r\n\r\nAdd an item to the end of the list.\r\n\r\n    list.push('one');\r\n    list.push('two');\r\n    list.push('three');\r\n    console.log(list.last()); // 'three'\r\n    console.log(list.first()); // 'one'\r\n    \r\n#### \\#unShift\r\n\r\n    list.unShift(item);\r\n\r\nAdd an item to the start of the list.\r\n\r\n    list.unShift('one');\r\n    list.unShift('two');\r\n    list.unShift('three');\r\n    console.log(list.first()); // 'three'\r\n    console.log(list.last()); // 'one'\r\n\r\n#### \\#pop\r\n\r\n    list.pop();\r\n\r\nRemove the item at the end of the list, returning the removed item.\r\nReturns `undefined` if the list is empty.\r\n\r\n    list.push('one');\r\n    list.push('two');\r\n    list.push('three');\r\n    var item = list.pop();\r\n    console.log(item); // 'three'\r\n    \r\n#### \\#shift\r\n\r\n    list.shift();\r\n\r\nRemove the item at the start of the list, returning the removed item.\r\nReturns `undefined` if the list is empty.\r\n\r\n    list.push('one');\r\n    list.push('two');\r\n    list.push('three');\r\n    var item = list.shift();\r\n    console.log(item); // 'one'\r\n    \r\n#### \\#first\r\n\r\n    list.first();\r\n    \r\nReturns the item at the start of the list.\r\nReturns `undefined` if the list is empty.\r\n\r\n    list.push('one');\r\n    list.push('two');\r\n    list.push('three');\r\n    console.log(list.first()); // 'one'\r\n    \r\n#### \\#last\r\n\r\n    list.last();\r\n    \r\nReturns the item at the end of the list.\r\nReturns `undefined` if the list is empty.\r\n\r\n    list.push('one');\r\n    list.push('two');\r\n    list.push('three');\r\n    console.log(list.last()); // 'three'\r\n    \r\n#### \\#get\r\n\r\n    list.get(i);\r\n    \r\nReturns the item at the given index.\r\nReturns `undefined` if an invalid value is given.\r\n\r\n    list.push('one');\r\n    list.push('two');\r\n    list.push('three');\r\n    console.log(list.get(0)); // 'one'\r\n    console.log(list.get(1)); // 'two'\r\n    console.log(list.get(2)); // 'three'\r\n    \r\n#### .length\r\n\r\n    list.length;\r\n    \r\nReturns the length of the list.\r\n\r\n    list.push('one');\r\n    list.push('two');\r\n    list.push('three');\r\n    console.log(list.length); // 3\r\n    \r\n    \r\n## Changelog\r\n\r\n* 2.0.x - 31/07/2015:\r\n    * Add some keywords to the package.json. (2.0.2)\r\n    * Edit formatting of changelog. (2.0.2)\r\n    * Make the get function faster by implementing back to front search. (2.0.1)\r\n    * \\+ \\# get (2.0.0)\r\n    * \\+ \\# get tests (2.0.0)\r\n    * Return `undefined` if the data doesn't exist instead of `null`. (2.0.0)\r\n    * Add get function to the documentation. (2.0.0)\r\n* 1.1.x - 30/07/2015:\r\n    * Add navigation to the README. (1.1.3)\r\n    * Small change to some errors in the README. (1.1.2)\r\n    * Add unShift function to the documentation. (1.1.1)\r\n    * \\+ \\# unShift (1.1.0)\r\n    * \\+ \\# unShift tests (1.1.0)\r\n* 1.0.x - 30/07/2015:\r\n    * Rename all function names: (1.0.0)\r\n        * \\# add -> \\# push\r\n        * \\# removeFromStart -> \\# shift\r\n        * \\# removeFromEnd -> \\# pop\r\n        * \\# getStart -> \\# first\r\n        * \\# getEnd -> \\# last\r\n    * Update the README formatting and information within.\r\n* 0.1.x - 30/07/2015:\r\n    * Added git remotes and issues to the package.json. (0.1.1)\r\n    * Initial implementation with: (0.1.0)\r\n        * Constructor\r\n        * \\# add\r\n        * \\# removeFromStart\r\n        * \\# removeFromEnd\r\n        * \\# getStart\r\n        * \\# getEnd\r\n        * .length\r\n        * Passing tests\r\n* 0.0.x - 30/07/2015 - Initial publish with no contents. (0.0.0)\r\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/wgpsutherland/js-double-linked-list",
  "_id": "double-linked-list@2.0.2",
  "dist": {
    "shasum": "5ee6366e56e5de5f327b8dcd2c598a750d545d91"
  },
  "_from": "double-linked-list@",
  "_resolved": "https://registry.npmjs.org/double-linked-list/-/double-linked-list-2.0.2.tgz"
}
